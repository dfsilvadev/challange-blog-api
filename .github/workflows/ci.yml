name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '20'
  POSTGRES_USER: test_user
  POSTGRES_PASSWORD: test_password
  POSTGRES_DB: test_blog_db
  DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_blog_db

jobs:
  # Job para verificar qualidade do código (paralelo)
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'yarn'
        
    - name: Cache node_modules
      uses: actions/cache@v4
      with:
        path: |
          node_modules
          ~/.cache/yarn
        key: ${{ runner.os }}-node-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-node-
          
    - name: Install dependencies
      run: yarn install --frozen-lockfile --prefer-offline
      
    - name: Check code formatting with Prettier
      run: yarn format --check
      
    - name: Run ESLint
      run: yarn lint
      
    - name: Check TypeScript compilation
      run: yarn build
      
    - name: Cache build artifacts
      uses: actions/cache@v4
      with:
        path: dist
        key: ${{ runner.os }}-build-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-build-
          
  # Job para executar testes (paralelo)
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'yarn'
        
    - name: Cache node_modules
      uses: actions/cache@v4
      with:
        path: |
          node_modules
          ~/.cache/yarn
        key: ${{ runner.os }}-node-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-node-
          
    - name: Install dependencies
      run: yarn install --frozen-lockfile --prefer-offline
      
    - name: Wait for PostgreSQL
      run: |
        until pg_isready -h localhost -p 5432 -U ${{ env.POSTGRES_USER }}; do
          echo "Waiting for PostgreSQL..."
          sleep 2
        done
        
    - name: Run tests with coverage
      run: yarn test:coverage
      env:
        DATABASE_URL: ${{ env.DATABASE_URL }}
        
    - name: Cache coverage reports
      uses: actions/cache@v4
      with:
        path: coverage
        key: ${{ runner.os }}-coverage-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-coverage-
          
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        
  # Job para validar Docker (paralelo)
  docker-validation:
    name: Docker Validation
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Cache Docker layers
      uses: actions/cache@v4
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-
          
    - name: Validate Dockerfile
      uses: hadolint/hadolint-action@v3.1.0
      with:
        dockerfile: Dockerfile
        
    - name: Build Docker image
      run: |
        echo "Building Docker image..."
        docker buildx build \
          --cache-from type=local,src=/tmp/.buildx-cache \
          --cache-to type=local,dest=/tmp/.buildx-cache-new,mode=max \
          -t blog-api:latest .
        
        # Limpar cache antigo e mover novo
        rm -rf /tmp/.buildx-cache
        mv /tmp/.buildx-cache-new /tmp/.buildx-cache
        
        echo "Docker build completed"
        
    - name: Verify Docker image exists
      run: |
        docker images | grep blog-api
        echo "Docker image built successfully"
      
    - name: Test Docker image
      run: |
        echo "Starting Docker container..."
        docker run --rm -d --name test-container -p 3000:3000 blog-api:latest
        
        echo "Container started, waiting for it to be ready..."
        sleep 15
        
        echo "Checking if container is running..."
        if docker ps | grep test-container; then
          echo "Container is running successfully"
        else
          echo "Container failed to start"
          docker logs test-container || true
          exit 1
        fi
        
        echo "Stopping container..."
        docker stop test-container
        
        echo "Container test completed successfully"
        
  # Job para segurança (paralelo)
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 8
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'yarn'
        
    - name: Cache node_modules
      uses: actions/cache@v4
      with:
        path: |
          node_modules
          ~/.cache/yarn
        key: ${{ runner.os }}-node-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-node-
          
    - name: Install dependencies
      run: yarn install --frozen-lockfile --prefer-offline
      
    - name: Run npm audit
      run: yarn audit --audit-level moderate
      
    - name: Run Snyk to check for vulnerabilities
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high
      continue-on-error: true
      
  # Job para análise de performance
  performance:
    name: Performance Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 12
    needs: [code-quality, test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'yarn'
        
    - name: Cache node_modules
      uses: actions/cache@v4
      with:
        path: |
          node_modules
          ~/.cache/yarn
        key: ${{ runner.os }}-node-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-node-
          
    - name: Install dependencies
      run: yarn install --frozen-lockfile --prefer-offline
      
    - name: Build application
      run: yarn build
      
    - name: Analyze bundle size
      run: |
        echo "Bundle size analysis:"
        du -sh dist/
        find dist/ -name "*.js" -exec wc -l {} + | tail -1
        echo "Total files in dist:"
        find dist/ -type f | wc -l
        
    - name: Performance test
      run: |
        echo "Starting performance test..."
        time yarn test:ci
        echo "Performance test completed" 